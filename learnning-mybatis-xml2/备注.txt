1、这个“where”标签会知道如果它包含的标签中有返回值的话，它就插入一个‘where’。此外，如果标签返回的内容是以AND 或OR 开头的，则它会剔除掉。

<select id="select1" resultMap="baseResultMap">
        select *from demo
           <where>
               <if test="name != null and name != ''">
                   name = #{name}
               </if>
               <if test="email != null and email != ''">
                   and email=#{email}
               </if>
           </where>
 </select>

 2、if-set
 当update语句中没有使用if标签时，如果有一个参数为null，都会导致错误。
 当在update语句中使用if标签时，如果前面的if没有执行，则会导致逗号多余错误。使用set标签可以将动态的配置SET 关键字，和剔除追加到条件末尾的任何不相关的逗号。
 使用if+set标签修改后，如果某项为null则不进行更新，而是保持数据库原值。如下示例：
 <update id="update1">
        update demo
            <set>
                <if test="name != null and name != ''">
                    name = #{name},
                </if>
                <if test="email != null and email != ''">
                     email=#{email}
                </if>
            </set>
        where id =  #{id}
 </update>
     这样就可以单独修改name或者email，或者是同时修改name和email，但是需要注意，如果什么都不修改的话是会报错的。

3、实际应用：
trim是更灵活的去处多余关键字的标签，它可以实践where和set的效果。

trim 替代where

<select id="select2" resultMap="baseResultMap">
     select *from demo
        <trim prefix="where" prefixOverrides="and|or">
            <if test="name != null and name != ''">
                name = #{name}
            </if>
            <if test="email != null and email != ''">
                and email=#{email}
            </if>
        </trim>
 </select>

trim 替代set
 <update id="update2">
     update demo
         <trim prefix="set" suffixOverrides=",">
             <if test="name != null and name != ''">
                 name = #{name},
             </if>
             <if test="email != null and email != ''">
                  email=#{email}
             </if>
         </trim>
     where id =  #{id}
  </update>

4、choose (when, otherwise)  几乎没用，可以用trim -where替代

有时候我们并不想应用所有的条件，而只是想从多个选项中选择一个。而使用if标签时，只要test中的表达式为true，就会执行if标签中的条件。MyBatis提供了choose 元素。if标签是与(and)的关系，而choose标签是或（or）的关系。

       choose标签是按顺序判断其内部when标签中的test条件出否成立，如果有一个成立，则choose结束。当choose中所有when的条件都不满则时，则执行otherwise中的sql。类似于Java 的switch 语句，choose为switch，when为case，otherwise则为default。

       例如下面例子，同样把所有可以限制的条件都写上，方面使用。choose会从上到下选择一个when标签的test为true的sql执行。安全考虑，我们使用where将choose包起来，放置关键字多于错误。

       <select id="select3" resultMap="baseResultMap">
           select *from demo
              <where>
                  <choose>
                     <when test="name != null and name != ''">
                         name = #{name}
                     </when>
                     <when test="email != null and email != ''">
                         and email=#{email}
                      </when>
                      <otherwise>

                      </otherwise>
                  </choose>
              </where>
       </select>


5、foreach    主要用于：条件中 in语句

  对于动态SQL 非常必须的，主是要迭代一个集合，通常是用于IN 条件。List 实例将使用“list”做为键，数组实例以“array” 做为键。
  foreach元素是非常强大的，它允许你指定一个集合，声明集合项和索引变量，它们可以用在元素体内。它也允许你指定开放和关闭的字符串，在迭代之间放置分隔符。这个元素是很智能的，它不会偶然地附加多余的分隔符。

  注意：你可以传递一个List实例或者数组作为参数对象传给MyBatis。当你这么做的时候，MyBatis会自动将它包装在一个Map中，用名称在作为键。List实例将会以“list”作为键，而数组实例将会以“array”作为键。

  参数为array示例的写法：
  /**foreach: 参数为array示例的写法*/
  public List<Demo> select3(String[] ids);

  <select id="select4" resultMap="baseResultMap">
      select *from demo where id in
         <foreach collection="array" item="id" open="(" separator="," close=")">
             #{id}
         </foreach>
  </select>

  参数为List示例的写法：
  /**foreach: 数为list示例的写法*/
  public List<Demo> select5(List<Integer> list);


  <select id="select5" resultMap="baseResultMap">
          select *from demo where id in
             <foreach collection="list" item="id" open="(" separator="," close=")">
                 #{id}
             </foreach>
  </select>




  mybatis 中 foreach collection的三种用法
  转载：http://blog.sina.com.cn/s/blog_b0d90e8c0102v1q1.html

  传参参考：http://www.cnblogs.com/ruiati/p/6410339.html

  foreach的主要用在构建in条件中，它可以在SQL语句中进行迭代一个集合。

  foreach元素的属性主要有 item，index，collection，open，separator，close。

      item表示集合中每一个元素进行迭代时的别名，
      index指 定一个名字，用于表示在迭代过程中，每次迭代到的位置，
      open表示该语句以什么开始，
      separator表示在每次进行迭代之间以什么符号作为分隔 符，
      close表示以什么结束。


  在使用foreach的时候最关键的也是最容易出错的就是collection属性，该属性是必须指定的，但是在不同情况 下，该属性的值是不一样的，主要有一下3种情况：

      1. 如果传入的是单参数且参数类型是一个List的时候，collection属性值为list
      2. 如果传入的是单参数且参数类型是一个array数组的时候，collection的属性值为array
      3. 如果传入的参数是多个的时候，我们就需要把它们封装成一个Map了，当然单参数也可

  以封装成map，实际上如果你在传入参数的时候，在breast里面也是会把它封装成一个Map的，map的key就是参数名，所以这个时候collection属性值就是传入的List或array对象在自己封装的map里面的key 下面分别来看看上述三种情况的示例代码：
  1.单参数List的类型：


   <select id="dynamicForeachTest" parameterType="java.util.List" resultType="Blog">
             select * from t_blog where id in
          <foreach collection="list" index="index" item="item" open="(" separator="," close=")">
                  #{item}
        </foreach>
      </select>



  上述collection的值为list，对应的Mapper是这样的
  public List dynamicForeachTest(List ids);
  测试代码：

  复制代码
    @Test
        public void dynamicForeachTest() {
            SqlSession session = Util.getSqlSessionFactory().openSession();
            BlogMapper blogMapper = session.getMapper(BlogMapper.class);
             List ids = new ArrayList();
             ids.add(1);
             ids.add(3);
             ids.add(6);
           List blogs = blogMapper.dynamicForeachTest(ids);
            for (Blog blog : blogs)
                System.out.println(blog);
            session.close();
        }
  复制代码



  2.单参数array数组的类型：

   <select id="dynamicForeach2Test" parameterType="java.util.ArrayList" resultType="Blog">
       select * from t_blog where id in
       <foreach collection="array" index="index" item="item" open="(" separator="," close=")">
            #{item}
      </foreach>
   </select>



  上述collection为array，对应的Mapper代码：
  public List dynamicForeach2Test(int[] ids);
  对应的测试代码：


  复制代码
    @Test
    public void dynamicForeach2Test() {
            SqlSession session = Util.getSqlSessionFactory().openSession();
            BlogMapper blogMapper = session.getMapper(BlogMapper.class);
           int[] ids = new int[] {1,3,6,9};
           List blogs = blogMapper.dynamicForeach2Test(ids);
           for (Blog blog : blogs)
           System.out.println(blog);
           session.close();
   }
  复制代码



  3.自己把参数封装成Map的类型

   <select id="dynamicForeach3Test" parameterType="java.util.HashMap" resultType="Blog">
           select * from t_blog where title like "%"#{title}"%" and id in
            <foreach collection="ids" index="index" item="item" open="(" separator="," close=")">
                 #{item}
            </foreach>
   </select>



  上述collection的值为ids，是传入的参数Map的key，对应的Mapper代码：
  public List dynamicForeach3Test(Map params);
  对应测试代码：


  复制代码
  @Test
      public void dynamicForeach3Test() {
          SqlSession session = Util.getSqlSessionFactory().openSession();
           BlogMapper blogMapper = session.getMapper(BlogMapper.class);
            final List ids = new ArrayList();
            ids.add(1);
            ids.add(2);
            ids.add(3);
            ids.add(6);
           ids.add(7);
           ids.add(9);
          Map params = new HashMap();
           params.put("ids", ids);
           params.put("title", "中国");
          List blogs = blogMapper.dynamicForeach3Test(params);
           for (Blog blog : blogs)
               System.out.println(blog);
           session.close();
       }
